body {
  padding: 50px;
}
.container {
  margin-bottom: 30px;
  /* persepective : 원근감. 3d로 표현하고자 하는 요소의 부모요소에 입력 */
  perspective: 1000px;
}
.box {
  width: 100px;
  height: 100px;
  border: 1px solid #888;
  text-align: center;
  line-height: 100px;
}
.translate .box:hover {
  /* translate : 요소를 x,y축 방향으로 이동시킨다. => 음수를 넣으면 반대로 작동. */
  transform: translateX(-30px);
  transform: translateY(30px);
  transform: translate(30px, -30px);
  transform: translateZ(-500px);
}
.scale .box:hover {
  /* scale : 요소를 x,y축 방향으로 확대 혹은 축소시킨다. 안의 요소도 같이 확대, 축소 된다. */
  /* 축소는 음수가 아니라 비율로 작성해야 한다.
     scale() 사용시 값을 1개만 넣으면 같은 비율로 확대 혹은 축소
     => 2개를 넣으면 각각 값에 따라 변형 */
  transform: scaleX(110%);
  transform: scaleY(0.9);
  transform: scale(1.1);
  transform: scaleZ(1.2);
}
.rotate .box:hover {
  /* rotate : 요소를 회전시킨다.
    => 양수를 넣으면 시계방향, 음수를 넣으면 반시계방향으로 회전
    rotateX(), rotateY()는 3차원 변형
    => perspective 속성을 사용해야 제대로 작동 */
  transform: rotate(-45deg);
  transform: rotateX(60deg);
  transform: rotateY(180deg);
}
.skew .box:hover {
  /* skew : 요소를 x,y축으로 왜곡시킨다. */
  transform: skewX(30deg);
  transform: skewY(30deg);
  transform: skew(30deg, 20deg);
}
.transition .box {
  transition-duration: 3s;
  transition-timing-function: ease-in-out; /*트랜지션 실행 형태를 지정. cubic-bezier로 커스텀 가능*/
  transition-property: width, height;
  transition: all ease-in 0.25s 1s;
}
.transition .box:hover {
  width: 300px;
  height: 150px;
  /* opacity: 0; */
  transition-property: width; /* 트랜지션을 적용할 속성 선택/ 기본값 all *
  /* transition-duration: 0.25s; */ /* 트랜지션을 실행할 시간 */
  transition-delay: 1s; /*트랜지션의 지연시간 지정 */
}
